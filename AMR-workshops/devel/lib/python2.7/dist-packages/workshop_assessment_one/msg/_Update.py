# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from workshop_assessment_one/Update.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Update(genpy.Message):
  _md5sum = "173bd9d26460de84cdbc682effdcf48f"
  _type = "workshop_assessment_one/Update"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """char input
char m
float32 pbelC 
float32 pbelD 
float32 pAC 
float32 pAD 
float32 pBC 
float32 pBD 
float32 pCEC
float32 pDEC
float32 pCED
float32 pDED
float32 pCFC
float32 pDFC
float32 pCFD
float32 pDFD

 
"""
  __slots__ = ['input','m','pbelC','pbelD','pAC','pAD','pBC','pBD','pCEC','pDEC','pCED','pDED','pCFC','pDFC','pCFD','pDFD']
  _slot_types = ['char','char','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       input,m,pbelC,pbelD,pAC,pAD,pBC,pBD,pCEC,pDEC,pCED,pDED,pCFC,pDFC,pCFD,pDFD

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Update, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.input is None:
        self.input = 0
      if self.m is None:
        self.m = 0
      if self.pbelC is None:
        self.pbelC = 0.
      if self.pbelD is None:
        self.pbelD = 0.
      if self.pAC is None:
        self.pAC = 0.
      if self.pAD is None:
        self.pAD = 0.
      if self.pBC is None:
        self.pBC = 0.
      if self.pBD is None:
        self.pBD = 0.
      if self.pCEC is None:
        self.pCEC = 0.
      if self.pDEC is None:
        self.pDEC = 0.
      if self.pCED is None:
        self.pCED = 0.
      if self.pDED is None:
        self.pDED = 0.
      if self.pCFC is None:
        self.pCFC = 0.
      if self.pDFC is None:
        self.pDFC = 0.
      if self.pCFD is None:
        self.pCFD = 0.
      if self.pDFD is None:
        self.pDFD = 0.
    else:
      self.input = 0
      self.m = 0
      self.pbelC = 0.
      self.pbelD = 0.
      self.pAC = 0.
      self.pAD = 0.
      self.pBC = 0.
      self.pBD = 0.
      self.pCEC = 0.
      self.pDEC = 0.
      self.pCED = 0.
      self.pDED = 0.
      self.pCFC = 0.
      self.pDFC = 0.
      self.pCFD = 0.
      self.pDFD = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B14f().pack(_x.input, _x.m, _x.pbelC, _x.pbelD, _x.pAC, _x.pAD, _x.pBC, _x.pBD, _x.pCEC, _x.pDEC, _x.pCED, _x.pDED, _x.pCFC, _x.pDFC, _x.pCFD, _x.pDFD))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 58
      (_x.input, _x.m, _x.pbelC, _x.pbelD, _x.pAC, _x.pAD, _x.pBC, _x.pBD, _x.pCEC, _x.pDEC, _x.pCED, _x.pDED, _x.pCFC, _x.pDFC, _x.pCFD, _x.pDFD,) = _get_struct_2B14f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B14f().pack(_x.input, _x.m, _x.pbelC, _x.pbelD, _x.pAC, _x.pAD, _x.pBC, _x.pBD, _x.pCEC, _x.pDEC, _x.pCED, _x.pDED, _x.pCFC, _x.pDFC, _x.pCFD, _x.pDFD))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 58
      (_x.input, _x.m, _x.pbelC, _x.pbelD, _x.pAC, _x.pAD, _x.pBC, _x.pBD, _x.pCEC, _x.pDEC, _x.pCED, _x.pDED, _x.pCFC, _x.pDFC, _x.pCFD, _x.pDFD,) = _get_struct_2B14f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B14f = None
def _get_struct_2B14f():
    global _struct_2B14f
    if _struct_2B14f is None:
        _struct_2B14f = struct.Struct("<2B14f")
    return _struct_2B14f
