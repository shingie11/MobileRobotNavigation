// Generated by gencpp from file wa_two/Update.msg
// DO NOT EDIT!


#ifndef WA_TWO_MESSAGE_UPDATE_H
#define WA_TWO_MESSAGE_UPDATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace wa_two
{
template <class ContainerAllocator>
struct Update_
{
  typedef Update_<ContainerAllocator> Type;

  Update_()
    : ut()
    , zt()  {
    }
  Update_(const ContainerAllocator& _alloc)
    : ut(_alloc)
    , zt(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _ut_type;
  _ut_type ut;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _zt_type;
  _zt_type zt;





  typedef boost::shared_ptr< ::wa_two::Update_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wa_two::Update_<ContainerAllocator> const> ConstPtr;

}; // struct Update_

typedef ::wa_two::Update_<std::allocator<void> > Update;

typedef boost::shared_ptr< ::wa_two::Update > UpdatePtr;
typedef boost::shared_ptr< ::wa_two::Update const> UpdateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wa_two::Update_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wa_two::Update_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace wa_two

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'wa_two': ['/home/sdhoro/amr/AMR-workshops/src/wa_two/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::wa_two::Update_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wa_two::Update_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wa_two::Update_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wa_two::Update_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wa_two::Update_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wa_two::Update_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wa_two::Update_<ContainerAllocator> >
{
  static const char* value()
  {
    return "25d92018e2a28a0b8fa588e8c7cd9459";
  }

  static const char* value(const ::wa_two::Update_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x25d92018e2a28a0bULL;
  static const uint64_t static_value2 = 0x8fa588e8c7cd9459ULL;
};

template<class ContainerAllocator>
struct DataType< ::wa_two::Update_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wa_two/Update";
  }

  static const char* value(const ::wa_two::Update_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wa_two::Update_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] ut\n\
float64[] zt\n\
";
  }

  static const char* value(const ::wa_two::Update_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wa_two::Update_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ut);
      stream.next(m.zt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Update_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wa_two::Update_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wa_two::Update_<ContainerAllocator>& v)
  {
    s << indent << "ut[]" << std::endl;
    for (size_t i = 0; i < v.ut.size(); ++i)
    {
      s << indent << "  ut[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.ut[i]);
    }
    s << indent << "zt[]" << std::endl;
    for (size_t i = 0; i < v.zt.size(); ++i)
    {
      s << indent << "  zt[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.zt[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // WA_TWO_MESSAGE_UPDATE_H
