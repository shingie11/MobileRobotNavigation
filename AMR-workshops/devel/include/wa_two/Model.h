// Generated by gencpp from file wa_two/Model.msg
// DO NOT EDIT!


#ifndef WA_TWO_MESSAGE_MODEL_H
#define WA_TWO_MESSAGE_MODEL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace wa_two
{
template <class ContainerAllocator>
struct Model_
{
  typedef Model_<ContainerAllocator> Type;

  Model_()
    : info_vector()
    , info_matrix()
    , at()
    , bt()
    , ct()
    , rt()
    , qt()  {
    }
  Model_(const ContainerAllocator& _alloc)
    : info_vector(_alloc)
    , info_matrix(_alloc)
    , at(_alloc)
    , bt(_alloc)
    , ct(_alloc)
    , rt(_alloc)
    , qt(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _info_vector_type;
  _info_vector_type info_vector;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _info_matrix_type;
  _info_matrix_type info_matrix;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _at_type;
  _at_type at;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _bt_type;
  _bt_type bt;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _ct_type;
  _ct_type ct;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _rt_type;
  _rt_type rt;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _qt_type;
  _qt_type qt;





  typedef boost::shared_ptr< ::wa_two::Model_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wa_two::Model_<ContainerAllocator> const> ConstPtr;

}; // struct Model_

typedef ::wa_two::Model_<std::allocator<void> > Model;

typedef boost::shared_ptr< ::wa_two::Model > ModelPtr;
typedef boost::shared_ptr< ::wa_two::Model const> ModelConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wa_two::Model_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wa_two::Model_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace wa_two

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'wa_two': ['/home/sdhoro/amr/AMR-workshops/src/wa_two/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::wa_two::Model_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wa_two::Model_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wa_two::Model_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wa_two::Model_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wa_two::Model_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wa_two::Model_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wa_two::Model_<ContainerAllocator> >
{
  static const char* value()
  {
    return "76a16224f9e634d471ba03018232a454";
  }

  static const char* value(const ::wa_two::Model_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x76a16224f9e634d4ULL;
  static const uint64_t static_value2 = 0x71ba03018232a454ULL;
};

template<class ContainerAllocator>
struct DataType< ::wa_two::Model_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wa_two/Model";
  }

  static const char* value(const ::wa_two::Model_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wa_two::Model_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] info_vector \n\
float64[] info_matrix\n\
float64[] at \n\
float64[] bt \n\
float64[] ct \n\
float64[] rt\n\
float64[] qt\n\
\n\
";
  }

  static const char* value(const ::wa_two::Model_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wa_two::Model_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.info_vector);
      stream.next(m.info_matrix);
      stream.next(m.at);
      stream.next(m.bt);
      stream.next(m.ct);
      stream.next(m.rt);
      stream.next(m.qt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Model_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wa_two::Model_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wa_two::Model_<ContainerAllocator>& v)
  {
    s << indent << "info_vector[]" << std::endl;
    for (size_t i = 0; i < v.info_vector.size(); ++i)
    {
      s << indent << "  info_vector[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.info_vector[i]);
    }
    s << indent << "info_matrix[]" << std::endl;
    for (size_t i = 0; i < v.info_matrix.size(); ++i)
    {
      s << indent << "  info_matrix[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.info_matrix[i]);
    }
    s << indent << "at[]" << std::endl;
    for (size_t i = 0; i < v.at.size(); ++i)
    {
      s << indent << "  at[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.at[i]);
    }
    s << indent << "bt[]" << std::endl;
    for (size_t i = 0; i < v.bt.size(); ++i)
    {
      s << indent << "  bt[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.bt[i]);
    }
    s << indent << "ct[]" << std::endl;
    for (size_t i = 0; i < v.ct.size(); ++i)
    {
      s << indent << "  ct[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.ct[i]);
    }
    s << indent << "rt[]" << std::endl;
    for (size_t i = 0; i < v.rt.size(); ++i)
    {
      s << indent << "  rt[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.rt[i]);
    }
    s << indent << "qt[]" << std::endl;
    for (size_t i = 0; i < v.qt.size(); ++i)
    {
      s << indent << "  qt[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.qt[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // WA_TWO_MESSAGE_MODEL_H
